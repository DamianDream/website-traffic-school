// --- Grids
@mixin gridCards($type: fit, $min: 280px, $max: 1fr, $gap: 30px) {
	display: grid;
	gap: $gap;
	grid-template-columns: repeat(auto-#{$type}, minmax($min, $max));
}

//========================================================================================================================================================

// --- EM
@function em($px, $current: 16) {
	$result: math.div($px, $current) + em;
	@return $result;
}

// --- REM
@function toRem($px, $current: 16) {
	$result: math.div($px, $current) + rem;
	@return $result;
}

//========================================================================================================================================================

// --- Breakpoint
/// @param {String} $breakpoint - Breakpoint name
/// @require $breakpoints
@mixin breakpoint($point) {
	// If the key exists in the map
	@if map-has-key($breakpoints, $point) {
		// Prints a media query based on the value
    	@media #{inspect(map-get($breakpoints, $point))} {
			@content;
		}
	}

	// If the key doesn't exist in the map
	@else {
	  @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
		  + "Available breakpoints are: #{map-keys($breakpoints)}.";
	}
  }

//========================================================================================================================================================

// Adaptive Value (clamp)
@mixin adaptiveValue($property, $startSize, $minSize, $keepSize: 0, $widthFrom: $containerWidth, $widthTo: $minWidth) {
	@if ($startSize==0) {
		$startSize: 0.000001;
	}
	@if ($minSize==0) {
		$minSize: 0.000001;
	}

	// For calc();
	$addSize: math.div($startSize - $minSize, 16);

	@if ($widthFrom == $containerWidth and $maxWidthContainer == 0) {
		$widthFrom: $maxWidth;
	}

	// BreaKpoints via EM
	$widthFromMedia: em($widthFrom);
	$widthToMedia: em($widthTo);

	// Link: https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/
	$slope: math.div(($startSize - $minSize), ($widthFrom - $widthTo));
	$yIntersection: -$widthTo * $slope + $minSize;
	@if ($yIntersection==0) {
		$yIntersection: 0.000001;
	}
	$flyValue: #{toRem($yIntersection)}" + " #{$slope * 100}vw;

	// Result property
	$propertyValue: #{"clamp(" toRem($minSize) "," $flyValue "," toRem($startSize) ")"};
	// Case value is negative
	@if ($minSize > $startSize) {
		$propertyValue: #{"clamp(" toRem($startSize) "," $flyValue "," toRem($minSize) ")"};
	}

	// Default value
	@if $keepSize != 1 and $keepSize != 3 {
		@media (min-width: $widthFromMedia) {
			#{$property}: toRem($startSize);
		}
	}
	// Adapt the size in the space between the specified widths of the viewport
	@media (min-width: $widthToMedia) and (max-width: $widthFromMedia) {
		// if supports clamp();
		@supports (#{$property}: $propertyValue) {
			#{$property}: $propertyValue;
		}
		// if NOT supports clamp();
		@supports not (#{$property}: $propertyValue) {
			#{$property}: calc(#{toRem($minSize)} + #{$addSize} * (100vw - #{toRem($widthTo)}) / #{math.div($widthFrom, 16) - math.div($widthTo, 16)});
		}
	}
	@if $keepSize != 1 and $keepSize != 2 {
		@media (max-width: $widthToMedia) {
			#{$property}: toRem($minSize);
		}
	}
}
// Snippet: "av"
// @include adaptiveValue("font-size", 20, 45);

//========================================================================================================================================================

@mixin visually-hidden {
	position: absolute !important;
	width: 1px !important;
	height: 1px !important;
	margin: -1px !important;
	border: 0 !important;
	padding: 0 !important;
	white-space: nowrap !important;
	clip-path: inset(100%) !important;
	clip: rect(0 0 0 0) !important;
	overflow: hidden !important;
}

@mixin square($size) {
	width: $size;
	aspect-ratio: 1;
}

@mixin abs-center {
	position: absolute;
	top: 50%;
	left: 50%;
	translate: -50% -50%;
}

@mixin flex-center($isInline: false) {
	@if $isInline {
	  display: inline-flex;
	} @else  {
	  display: flex;
	}
  
	justify-content: center;
	align-items: center;
}

@mixin fluid-text($max: 48, $min: 16) {
	font-size: clamp(#{$min}px, #{$max / 1440 * 100}vw, #{$max}px);
  }
  
  @mixin reset-link {
	color: inherit;
  
	&,
	&:hover {
	  text-decoration: none;
	}
  }
  
  @mixin reset-button {
	padding: 0;
	background-color: transparent;
	border: none;
  }
