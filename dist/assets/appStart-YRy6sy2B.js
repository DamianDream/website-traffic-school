(function(){const o=document.createElement("link").relList;if(o&&o.supports&&o.supports("modulepreload"))return;for(const e of document.querySelectorAll('link[rel="modulepreload"]'))l(e);new MutationObserver(e=>{for(const t of e)if(t.type==="childList")for(const r of t.addedNodes)r.tagName==="LINK"&&r.rel==="modulepreload"&&l(r)}).observe(document,{childList:!0,subtree:!0});function i(e){const t={};return e.integrity&&(t.integrity=e.integrity),e.referrerPolicy&&(t.referrerPolicy=e.referrerPolicy),e.crossOrigin==="use-credentials"?t.credentials="include":e.crossOrigin==="anonymous"?t.credentials="omit":t.credentials="same-origin",t}function l(e){if(e.ep)return;e.ep=!0;const t=i(e);fetch(e.href,t)}})();const p=()=>{document.querySelector("body.preload")||console.error("Failed to find preload class for 'body' tag name"),window.addEventListener("load",()=>{document.body.classList.remove("preload")})},h="modulepreload",y=function(s,o){return new URL(s,o).href},u={},f=function(o,i,l){let e=Promise.resolve();if(i&&i.length>0){const t=document.getElementsByTagName("link");e=Promise.all(i.map(r=>{if(r=y(r,l),r in u)return;u[r]=!0;const a=r.endsWith(".css"),m=a?'[rel="stylesheet"]':"";if(!!l)for(let c=t.length-1;c>=0;c--){const d=t[c];if(d.href===r&&(!a||d.rel==="stylesheet"))return}else if(document.querySelector(`link[href="${r}"]${m}`))return;const n=document.createElement("link");if(n.rel=a?"stylesheet":h,a||(n.as="script",n.crossOrigin=""),n.href=r,document.head.appendChild(n),a)return new Promise((c,d)=>{n.addEventListener("load",c),n.addEventListener("error",()=>d(new Error(`Unable to preload CSS for ${r}`)))})}))}return e.then(()=>o()).catch(t=>{const r=new Event("vite:preloadError",{cancelable:!0});if(r.payload=t,window.dispatchEvent(r),!r.defaultPrevented)throw t})},g=()=>{Object.values(Object.assign({"./filesToStart/copyrightText.js":()=>f(()=>import("./copyrightText-GX0oC1WF.js"),__vite__mapDeps([]),import.meta.url),"./filesToStart/resizeStopAnimation.js":()=>f(()=>import("./resizeStopAnimation-9dRB0Rdu.js"),__vite__mapDeps([]),import.meta.url)})).forEach(o=>{o()})},E=()=>{try{p(),g()}catch(s){console.error("Fail to load appStart",s)}};export{E as a};
function __vite__mapDeps(indexes) {
  if (!__vite__mapDeps.viteFileDeps) {
    __vite__mapDeps.viteFileDeps = []
  }
  return indexes.map((i) => __vite__mapDeps.viteFileDeps[i])
}
